STUCK_FLAG	: te@B}efFk~{^Ixv@}y\BC4
REAL_FLAG	: 4CB\\y}@vxI^{~kFfe}B@et


// >> = lsr
// << = lsl

xor = lambda x: [chr(ord(i)^18) for i in x]

def aneh(a1, a2):
	v4 = (ord(a1) >> 1) + (ord(a2) << 1)
	return chr( (v4 >> (v4 >> 7)) - 1 )

def find(k, f):
	for ch in printable:
		tmp = aneh(k,ch)
		if tmp == f:
			print(f'{ch} -> {tmp}')

def IDAencrypt(a1, a2, a3):
	while a2 != a3:
		v4 = (ord(a1[a2-1]) >> 1) + (ord(a1[a2]) << 1)
		a1[a2] = chr( (v4 >> (v4 >> 7)) - 1 )
		a2 += 1
	return a1

/*
Knowing key '4', find next key using two function 'aneh' & 'find'
ex : find(knowing_key, result_key) -> find('4', 'C')
After that we'll get three result, i'm priffer choice '7'.
Now we have 2 knowing_key ['4', '7'], let's bruteforce the next key
using func 'IDAencrypt', and create simple script to check every byte
*/

from itertools import permutations
from string import printable

data = ['4','7']
germ = ''.join(data)
tmp = ''.join(data)
while len(data) != len(enc):
	for ch in printable:
		tmp += ch
		tmp = [i for i in tmp]
		IDAencrypt(tmp, 1, len(tmp))
		if all(real[i]==j for i,j in enumerate(tmp)):
			data.append(ch)
			tmp = ''.join(data)
			germ += ch
			print(f'Found : {germ}')
			break
		else:
			tmp = ''.join(data)

/* KEY : "&%!_q3quNd_ws_fD_wu#DN" */
